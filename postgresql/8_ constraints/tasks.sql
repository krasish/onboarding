-- Резюме:

-- PRIMARY KEY
-- - може от един или повече атрибути
-- - не се допускат повторения
-- - не се допускат NULL стойности
-- - в една релация не може да има повече от един PK
-- (кажи за Identity)

-- UNIQUE
-- - може от един или повече атрибути
-- - не се допускат повторения
-- - допуска се NULL, но зависи кое СУБД ползваме
-- - в една релация може да има много UNIQUE ограничения

-- FOREIGN KEY
-- - реферира PK в друга или _същата_ таблица (в презентацията има пропуск)
-- - броят и типът на съставящите го атрибути трябва да съвпада с тези на PK
-- - допускат се повторения
-- - допуска се NULL
-- - в една релация може да има много FK

-------------

-- Зад. 1.
-- а) Да се направи така, че да не може два филма да имат еднаква дължина.
ALTER TABLE movies.movie
ADD CONSTRAINT different_len UNIQUE (length);

-- б) Да се направи така, че да не може едно студио да има два филма с еднаква дължина
ALTER TABLE movies.movie ADD CONSTRAINT diff_studio_length UNIQUE (length, studioname);

INSERT INTO movies.movie
VALUES ('film1', 1923, 234, 'y', 'sdf', 123),
       ('film2', 1924, 234, 'n', 'sdf', 123);

-- Зад. 2. Изтрийте ограниченията от първа задача от Movie.

ALTER TABLE movies.movie
DROP CONSTRAINT diff_studio_length;

ALTER TABLE movies.movie
DROP CONSTRAINT different_len;

-- Зад. 3.
-- а) За всеки студент се съхранява следната информация:
-- фак. номер - от 0 до 99999, първичен ключ;
-- име - до 100 символа;
-- ЕГН - точно 10 символа, уникално;
-- e-mail - до 100 символа, уникален;
-- рождена дата;
-- дата на приемане в университета - трябва да бъде поне 18 години след рождената;
-- за всички атрибути задължително трябва да има зададена стойност (не може NULL)


CREATE SCHEMA students;
SET SEARCH_PATH = students;

DROP TABLE student;

CREATE TABLE student (
    fn INTEGER PRIMARY KEY CHECK ( fn >= 0 AND fn <= 99999),
    name varchar(100),
    egn char(10) UNIQUE,
    email varchar(100) UNIQUE ,
    birthdate date,
    enrolled date CHECK ( birthdate + INTERVAL '18 years' <= enrolled));

INSERT INTO student
VALUES ('81780', 'Krasi', '1234567890', 'bosa_na_kokosa@abv.bg', '2000-05-16', '2018-05-16');

SELECT
birthdate + INTERVAL '18 years' AS o FROM student;



-- б) добавете валидация за e-mail адреса - да бъде във формат <нещо>@<нещо>.<нещо>

ALTER TABLE student
ADD CONSTRAINT email_check CHECK ( email LIKE '%@%');


-- в) създайте таблица за университетски курсове - уникален номер и име

CREATE TABLE courses (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ,
    name varchar
);


INSERT INTO courses(name)
VALUES ('Algebra 2');

INSERT INTO courses(name)
VALUES ('DAA');

-- всеки студент може да се запише в много курсове и във всеки курс
-- може да има записани много студенти.
-- При изтриване на даден курс автоматично да се отписват всички студенти от него.

CREATE TABLE course_student (
    fn INTEGER REFERENCES student(fn),
    course_id INTEGER REFERENCES courses(id) ON DELETE CASCADE
);


